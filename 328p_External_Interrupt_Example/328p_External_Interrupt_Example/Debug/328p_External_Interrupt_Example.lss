
328p_External_Interrupt_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000741  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069b  00000000  00000000  00000909  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b0  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dd  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000077  00000000  00000000  00001681  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 57 00 	call	0xae	; 0xae <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_1>:
#define LED_DDR					DDRB
#define LED_PORT				PORTB 
#define LED2					PINB2
#define LED1					PINB1

ISR(INT0_vect) {         /* Run every time there is a change on button */
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  if (bit_is_clear(BUTTON_PIN, BUTTON)) {
  8a:	4a 99       	sbic	0x09, 2	; 9
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__vector_1+0x12>
    LED_PORT |= (1 << LED2);
  8e:	2a 9a       	sbi	0x05, 2	; 5
  90:	01 c0       	rjmp	.+2      	; 0x94 <__vector_1+0x14>
  }
  else {
    LED_PORT &= ~(1 << LED2);
  92:	2a 98       	cbi	0x05, 2	; 5
  }
}
  94:	0f 90       	pop	r0
  96:	0f be       	out	0x3f, r0	; 63
  98:	0f 90       	pop	r0
  9a:	1f 90       	pop	r1
  9c:	18 95       	reti

0000009e <initInterrupt0>:

void initInterrupt0(void) {
  EIMSK |= (1 << INT0);                                 /* enable INT0 */
  9e:	e8 9a       	sbi	0x1d, 0	; 29
  EICRA |= (1 << ISC00);                /* trigger when button changes */
  a0:	e9 e6       	ldi	r30, 0x69	; 105
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	80 83       	st	Z, r24
  sei();                          /* set (global) interrupt enable bit */
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <main>:
}

int main(void) {
  // -------- Inits --------- //
  LED_DDR = 0xff;                                   /* Turn on PB1 */
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	84 b9       	out	0x04, r24	; 4
  BUTTON_PORT |= (1 << BUTTON);                              /* pullup */
  b2:	5a 9a       	sbi	0x0b, 2	; 11
  initInterrupt0();
  b4:	0e 94 4f 00 	call	0x9e	; 0x9e <initInterrupt0>

  // ------ Event loop ------ //
  while (1) {

    _delay_ms(200);
    LED_PORT ^= (1 << LED1);
  b8:	92 e0       	ldi	r25, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	ef e4       	ldi	r30, 0x4F	; 79
  bc:	f3 ec       	ldi	r31, 0xC3	; 195
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x10>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x16>
  c4:	00 00       	nop
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	89 27       	eor	r24, r25
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	f6 cf       	rjmp	.-20     	; 0xba <main+0xc>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
