
328p_ADC_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000280  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b8d  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fc  00000000  00000000  00000f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000553  00000000  00000000  0000175d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00001cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ac  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ae  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002876  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
{
	
	// -------- Inits --------- //
	  uint16_t adcValue;
	  char serialCharacter;
	  initUSART();
  80:	0e 94 68 00 	call	0xd0	; 0xd0 <initUSART>
#include "USART.h"


// -------- Functions --------- //
static inline void initADC0(void) {
	ADMUX |= (1 << REFS0);                  /* reference voltage on AVCC */
  84:	ec e7       	ldi	r30, 0x7C	; 124
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2);                   /* ADC clock prescaler /16 */
  8e:	ea e7       	ldi	r30, 0x7A	; 122
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	84 60       	ori	r24, 0x04	; 4
  96:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                                 /* enable ADC */
  98:	80 81       	ld	r24, Z
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	80 83       	st	Z, r24
	
	/* --- Event Loop --- */
    while (1) 
    {

		ADCSRA |= (1 << ADSC);                     /* start ADC conversion */
  9e:	ca e7       	ldi	r28, 0x7A	; 122
  a0:	d0 e0       	ldi	r29, 0x00	; 0
		loop_until_bit_is_clear(ADCSRA, ADSC);          /* wait until done */
		adcValue = ADC;                                     /* read ADC in */
  a2:	08 e7       	ldi	r16, 0x78	; 120
  a4:	10 e0       	ldi	r17, 0x00	; 0
	
	/* --- Event Loop --- */
    while (1) 
    {

		ADCSRA |= (1 << ADSC);                     /* start ADC conversion */
  a6:	88 81       	ld	r24, Y
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	88 83       	st	Y, r24
		loop_until_bit_is_clear(ADCSRA, ADSC);          /* wait until done */
  ac:	88 81       	ld	r24, Y
  ae:	86 fd       	sbrc	r24, 6
  b0:	fd cf       	rjmp	.-6      	; 0xac <main+0x2c>
		adcValue = ADC;                                     /* read ADC in */
  b2:	f8 01       	movw	r30, r16
  b4:	80 81       	ld	r24, Z
  b6:	91 81       	ldd	r25, Z+1	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	ff e3       	ldi	r31, 0x3F	; 63
  ba:	2d e0       	ldi	r18, 0x0D	; 13
  bc:	33 e0       	ldi	r19, 0x03	; 3
  be:	f1 50       	subi	r31, 0x01	; 1
  c0:	20 40       	sbci	r18, 0x00	; 0
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x3e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x48>
  c8:	00 00       	nop
		
		_delay_ms(1000);
		printWord(adcValue);
  ca:	0e 94 81 00 	call	0x102	; 0x102 <printWord>
    }
  ce:	eb cf       	rjmp	.-42     	; 0xa6 <main+0x26>

000000d0 <initUSART>:
void printByte(uint8_t byte) {
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
}
  d0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  da:	e0 ec       	ldi	r30, 0xC0	; 192
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	80 83       	st	Z, r24
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  f0:	08 95       	ret

000000f2 <transmitByte>:
  f2:	e0 ec       	ldi	r30, 0xC0	; 192
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	95 ff       	sbrs	r25, 5
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <transmitByte+0x4>
  fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 100:	08 95       	ret

00000102 <printWord>:

void printWord(uint16_t word) {
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	8c 01       	movw	r16, r24
  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 10c:	9c 01       	movw	r18, r24
 10e:	32 95       	swap	r19
 110:	22 95       	swap	r18
 112:	2f 70       	andi	r18, 0x0F	; 15
 114:	23 27       	eor	r18, r19
 116:	3f 70       	andi	r19, 0x0F	; 15
 118:	23 27       	eor	r18, r19
 11a:	a7 e4       	ldi	r26, 0x47	; 71
 11c:	b3 e0       	ldi	r27, 0x03	; 3
 11e:	0e 94 2f 01 	call	0x25e	; 0x25e <__umulhisi3>
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
 126:	96 95       	lsr	r25
 128:	87 95       	ror	r24
 12a:	96 95       	lsr	r25
 12c:	87 95       	ror	r24
 12e:	80 5d       	subi	r24, 0xD0	; 208
 130:	0e 94 79 00 	call	0xf2	; 0xf2 <transmitByte>
  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 134:	98 01       	movw	r18, r16
 136:	36 95       	lsr	r19
 138:	27 95       	ror	r18
 13a:	36 95       	lsr	r19
 13c:	27 95       	ror	r18
 13e:	36 95       	lsr	r19
 140:	27 95       	ror	r18
 142:	a5 ec       	ldi	r26, 0xC5	; 197
 144:	b0 e2       	ldi	r27, 0x20	; 32
 146:	0e 94 2f 01 	call	0x25e	; 0x25e <__umulhisi3>
 14a:	ac 01       	movw	r20, r24
 14c:	52 95       	swap	r21
 14e:	42 95       	swap	r20
 150:	4f 70       	andi	r20, 0x0F	; 15
 152:	45 27       	eor	r20, r21
 154:	5f 70       	andi	r21, 0x0F	; 15
 156:	45 27       	eor	r20, r21
 158:	9a 01       	movw	r18, r20
 15a:	ad ec       	ldi	r26, 0xCD	; 205
 15c:	bc ec       	ldi	r27, 0xCC	; 204
 15e:	0e 94 2f 01 	call	0x25e	; 0x25e <__umulhisi3>
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	96 95       	lsr	r25
 168:	87 95       	ror	r24
 16a:	96 95       	lsr	r25
 16c:	87 95       	ror	r24
 16e:	9c 01       	movw	r18, r24
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	82 0f       	add	r24, r18
 182:	93 1f       	adc	r25, r19
 184:	9a 01       	movw	r18, r20
 186:	28 1b       	sub	r18, r24
 188:	39 0b       	sbc	r19, r25
 18a:	c9 01       	movw	r24, r18
 18c:	80 5d       	subi	r24, 0xD0	; 208
 18e:	0e 94 79 00 	call	0xf2	; 0xf2 <transmitByte>
  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 192:	98 01       	movw	r18, r16
 194:	36 95       	lsr	r19
 196:	27 95       	ror	r18
 198:	36 95       	lsr	r19
 19a:	27 95       	ror	r18
 19c:	ab e7       	ldi	r26, 0x7B	; 123
 19e:	b4 e1       	ldi	r27, 0x14	; 20
 1a0:	0e 94 2f 01 	call	0x25e	; 0x25e <__umulhisi3>
 1a4:	ac 01       	movw	r20, r24
 1a6:	56 95       	lsr	r21
 1a8:	47 95       	ror	r20
 1aa:	9a 01       	movw	r18, r20
 1ac:	ad ec       	ldi	r26, 0xCD	; 205
 1ae:	bc ec       	ldi	r27, 0xCC	; 204
 1b0:	0e 94 2f 01 	call	0x25e	; 0x25e <__umulhisi3>
 1b4:	96 95       	lsr	r25
 1b6:	87 95       	ror	r24
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	9c 01       	movw	r18, r24
 1c2:	22 0f       	add	r18, r18
 1c4:	33 1f       	adc	r19, r19
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	82 0f       	add	r24, r18
 1d4:	93 1f       	adc	r25, r19
 1d6:	9a 01       	movw	r18, r20
 1d8:	28 1b       	sub	r18, r24
 1da:	39 0b       	sbc	r19, r25
 1dc:	c9 01       	movw	r24, r18
 1de:	80 5d       	subi	r24, 0xD0	; 208
 1e0:	0e 94 79 00 	call	0xf2	; 0xf2 <transmitByte>
  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 1e4:	98 01       	movw	r18, r16
 1e6:	ad ec       	ldi	r26, 0xCD	; 205
 1e8:	bc ec       	ldi	r27, 0xCC	; 204
 1ea:	0e 94 2f 01 	call	0x25e	; 0x25e <__umulhisi3>
 1ee:	ec 01       	movw	r28, r24
 1f0:	d6 95       	lsr	r29
 1f2:	c7 95       	ror	r28
 1f4:	d6 95       	lsr	r29
 1f6:	c7 95       	ror	r28
 1f8:	d6 95       	lsr	r29
 1fa:	c7 95       	ror	r28
 1fc:	9e 01       	movw	r18, r28
 1fe:	0e 94 2f 01 	call	0x25e	; 0x25e <__umulhisi3>
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	96 95       	lsr	r25
 208:	87 95       	ror	r24
 20a:	96 95       	lsr	r25
 20c:	87 95       	ror	r24
 20e:	9c 01       	movw	r18, r24
 210:	22 0f       	add	r18, r18
 212:	33 1f       	adc	r19, r19
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	82 0f       	add	r24, r18
 222:	93 1f       	adc	r25, r19
 224:	9e 01       	movw	r18, r28
 226:	28 1b       	sub	r18, r24
 228:	39 0b       	sbc	r19, r25
 22a:	c9 01       	movw	r24, r18
 22c:	80 5d       	subi	r24, 0xD0	; 208
 22e:	0e 94 79 00 	call	0xf2	; 0xf2 <transmitByte>
  transmitByte('0' + (word % 10));                             /* Ones */
 232:	ce 01       	movw	r24, r28
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	cc 0f       	add	r28, r28
 23a:	dd 1f       	adc	r29, r29
 23c:	cc 0f       	add	r28, r28
 23e:	dd 1f       	adc	r29, r29
 240:	cc 0f       	add	r28, r28
 242:	dd 1f       	adc	r29, r29
 244:	c8 0f       	add	r28, r24
 246:	d9 1f       	adc	r29, r25
 248:	c8 01       	movw	r24, r16
 24a:	8c 1b       	sub	r24, r28
 24c:	9d 0b       	sbc	r25, r29
 24e:	80 5d       	subi	r24, 0xD0	; 208
 250:	0e 94 79 00 	call	0xf2	; 0xf2 <transmitByte>
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

0000025e <__umulhisi3>:
 25e:	a2 9f       	mul	r26, r18
 260:	b0 01       	movw	r22, r0
 262:	b3 9f       	mul	r27, r19
 264:	c0 01       	movw	r24, r0
 266:	a3 9f       	mul	r26, r19
 268:	70 0d       	add	r23, r0
 26a:	81 1d       	adc	r24, r1
 26c:	11 24       	eor	r1, r1
 26e:	91 1d       	adc	r25, r1
 270:	b2 9f       	mul	r27, r18
 272:	70 0d       	add	r23, r0
 274:	81 1d       	adc	r24, r1
 276:	11 24       	eor	r1, r1
 278:	91 1d       	adc	r25, r1
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
